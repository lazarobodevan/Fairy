// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Producer{
  id              String @id @default(uuid())
  name            String
  email           String
  password        String
  origin_city     String
  telephone       String
  picture         Bytes?
  cpf             String
  attend_cities   String
  where_to_find   String
  products        Product[]
  orders          Order[]
  favd_by         ConsumerFavsProducers[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?
}

model Consumer{
  id              String  @id @default(uuid())
  name            String
  email           String
  password        String
  origin_city     String
  telephone       String
  picture         Bytes?
  cpf             String
  orders          Order[]
  fav_producers   ConsumerFavsProducers[]
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  deletedAt       DateTime?

}

model ConsumerFavsProducers{
  consumer        Consumer @relation(fields: [consumerId], references: [id])
  consumerId      String
  producer        Producer @relation(fields: [producerId], references: [id])
  producerId      String

  @@id([consumerId, producerId])
}

model Product{
  id                      String @id @default(uuid())
  picture                 Bytes
  name                    String
  description             String
  category                Category @relation(fields: [categoryId], references: [id])
  categoryId              String
  price                   Decimal
  unity                   Unit   @relation(fields: [unityId], references: [id])
  unityId                 String
  available_quantity      Int
  is_organic              Boolean @default(false)
  harvest_date            DateTime
  producer                Producer @relation(fields: [producerId], references: [id])
  producerId              String
  orders                  Order[]
  createdAt               DateTime @default(now())
  updatedAt               DateTime @updatedAt
  deletedAt               DateTime?
}

model Category{
  id          String @id @default(uuid()) 
  name        String
  products    Product[]
}

model Unit{
  id          String @id @default(uuid())
  name        String
  products    Product[]
}

enum Status{
  PENDING
  ACCEPTED
  REJECTED
}

model Order{
  id                      String @id @default(uuid())
  consumer                Consumer @relation(fields: [consumerId], references: [id])
  consumerId              String
  producer                Producer @relation(fields: [producerId], references: [id])
  producerId              String
  product                 Product @relation(fields: [productId], references: [id])
  productId               String
  quantity                Int
  consumer_obs            String
  producer_obs            String
  status                  Status @default(PENDING)

  createdAt               DateTime @default(now())
  acceptedAt              DateTime?
  rejectedAt              DateTime?
  updatedAt               DateTime @updatedAt
  deletedAt               DateTime?
}